
GPIO_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008b4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a5c  08000a5c  000204a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a5c  08000a5c  000204a4  2**0
                  CONTENTS
  4 .ARM          00000000  08000a5c  08000a5c  000204a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a5c  08000a5c  000204a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a5c  08000a5c  00010a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a60  08000a60  00010a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a4  20000000  08000a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  200004a4  08000f08  000204a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08000f08  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003982  00000000  00000000  000204ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000620  00000000  00000000  00023e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000250  00000000  00000000  00024470  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000003c6  00000000  00000000  000246c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000183c  00000000  00000000  00024a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000068ee  00000000  00000000  000262c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0002cbb0  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000200  00000000  00000000  0002cc30  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  000008f8  00000000  00000000  0002ce30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	200004a4 	.word	0x200004a4
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000a44 	.word	0x08000a44

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	200004a8 	.word	0x200004a8
 80001e4:	08000a44 	.word	0x08000a44

080001e8 <Port_Init>:

Port_ConfigType* GlobalConfigPtr;


void Port_Init (const Port_ConfigType* ConfigPtr)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	gu8_PortInitStatus = MODULE_UNINITIALIZED;
 80001f0:	4baa      	ldr	r3, [pc, #680]	; (800049c <Port_Init+0x2b4>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	701a      	strb	r2, [r3, #0]
	volatile  GPIO_RegTypes * pReg = 0U;
 80001f6:	2300      	movs	r3, #0
 80001f8:	613b      	str	r3, [r7, #16]
	uint8_t loopItr0 = 0U;
 80001fa:	2300      	movs	r3, #0
 80001fc:	75fb      	strb	r3, [r7, #23]
	uint8_t moduleNo = 0U;
 80001fe:	2300      	movs	r3, #0
 8000200:	73fb      	strb	r3, [r7, #15]
	uint8_t pinNo = 0U;
 8000202:	2300      	movs	r3, #0
 8000204:	73bb      	strb	r3, [r7, #14]
	uint16_t portsConfigured = 0U;
 8000206:	2300      	movs	r3, #0
 8000208:	82bb      	strh	r3, [r7, #20]

	if(ConfigPtr == NULL_PTR)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d103      	bne.n	8000218 <Port_Init+0x30>
	{
		gu8_PortInitStatus = MODULE_INIT_FAILED;
 8000210:	4ba2      	ldr	r3, [pc, #648]	; (800049c <Port_Init+0x2b4>)
 8000212:	2202      	movs	r2, #2
 8000214:	701a      	strb	r2, [r3, #0]
		return;
 8000216:	e15e      	b.n	80004d6 <Port_Init+0x2ee>
	}

	GlobalConfigPtr = (Port_ConfigType*) ConfigPtr;
 8000218:	4aa1      	ldr	r2, [pc, #644]	; (80004a0 <Port_Init+0x2b8>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	6013      	str	r3, [r2, #0]

	for(loopItr0=0U; loopItr0<TOTAL_NO_OF_PINS; loopItr0++)
 800021e:	2300      	movs	r3, #0
 8000220:	75fb      	strb	r3, [r7, #23]
 8000222:	e134      	b.n	800048e <Port_Init+0x2a6>
	{
		if((ConfigPtr[loopItr0]).PinMode != PIN_UNUSED)
 8000224:	7dfb      	ldrb	r3, [r7, #23]
 8000226:	00db      	lsls	r3, r3, #3
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	4413      	add	r3, r2
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	2bff      	cmp	r3, #255	; 0xff
 8000230:	f000 812a 	beq.w	8000488 <Port_Init+0x2a0>
		{
			moduleNo = loopItr0/16U;
 8000234:	7dfb      	ldrb	r3, [r7, #23]
 8000236:	091b      	lsrs	r3, r3, #4
 8000238:	73fb      	strb	r3, [r7, #15]
			pinNo = loopItr0%16U;
 800023a:	7dfb      	ldrb	r3, [r7, #23]
 800023c:	f003 030f 	and.w	r3, r3, #15
 8000240:	73bb      	strb	r3, [r7, #14]
			GPIO_Port_Enable(moduleNo);	/** Turns on the Clock for the configured Port */
 8000242:	7bfb      	ldrb	r3, [r7, #15]
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fb32 	bl	80008ae <GPIO_Port_Enable>
			pReg = (GPIO_RegTypes *)Gpio_BaseAddress[moduleNo];
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	4a95      	ldr	r2, [pc, #596]	; (80004a4 <Port_Init+0x2bc>)
 800024e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000252:	613b      	str	r3, [r7, #16]

			portsConfigured |= SET_BIT(moduleNo);
 8000254:	7bfb      	ldrb	r3, [r7, #15]
 8000256:	2201      	movs	r2, #1
 8000258:	fa02 f303 	lsl.w	r3, r2, r3
 800025c:	b29a      	uxth	r2, r3
 800025e:	8abb      	ldrh	r3, [r7, #20]
 8000260:	4313      	orrs	r3, r2
 8000262:	82bb      	strh	r3, [r7, #20]

			/** Configure the Pull Up/Down settings */
			REG_RMW32(&pReg->PUPDR.R,MASK_BITS(0x3U,pinNo*2U),((ConfigPtr[loopItr0]).PinPupDown)<<(pinNo*2U));
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	68da      	ldr	r2, [r3, #12]
 8000268:	7bbb      	ldrb	r3, [r7, #14]
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	2103      	movs	r1, #3
 800026e:	fa01 f303 	lsl.w	r3, r1, r3
 8000272:	43db      	mvns	r3, r3
 8000274:	401a      	ands	r2, r3
 8000276:	7dfb      	ldrb	r3, [r7, #23]
 8000278:	00db      	lsls	r3, r3, #3
 800027a:	6879      	ldr	r1, [r7, #4]
 800027c:	440b      	add	r3, r1
 800027e:	79db      	ldrb	r3, [r3, #7]
 8000280:	4619      	mov	r1, r3
 8000282:	7bbb      	ldrb	r3, [r7, #14]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	fa01 f303 	lsl.w	r3, r1, r3
 800028a:	4618      	mov	r0, r3
 800028c:	7bbb      	ldrb	r3, [r7, #14]
 800028e:	005b      	lsls	r3, r3, #1
 8000290:	2103      	movs	r1, #3
 8000292:	fa01 f303 	lsl.w	r3, r1, r3
 8000296:	4003      	ands	r3, r0
 8000298:	431a      	orrs	r2, r3
 800029a:	693b      	ldr	r3, [r7, #16]
 800029c:	60da      	str	r2, [r3, #12]

			/** Select the output settings */
			if(((ConfigPtr[loopItr0]).PinDirection)==PORT_PIN_OUT)
 800029e:	7dfb      	ldrb	r3, [r7, #23]
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	4413      	add	r3, r2
 80002a6:	785b      	ldrb	r3, [r3, #1]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d136      	bne.n	800031a <Port_Init+0x132>
			{
				REG_RMW32(&pReg->OTYPER.R,MASK_BITS(0x1U,pinNo),((ConfigPtr[loopItr0]).PinOutputMode)<<(pinNo));
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	7bbb      	ldrb	r3, [r7, #14]
 80002b2:	2101      	movs	r1, #1
 80002b4:	fa01 f303 	lsl.w	r3, r1, r3
 80002b8:	43db      	mvns	r3, r3
 80002ba:	401a      	ands	r2, r3
 80002bc:	7dfb      	ldrb	r3, [r7, #23]
 80002be:	00db      	lsls	r3, r3, #3
 80002c0:	6879      	ldr	r1, [r7, #4]
 80002c2:	440b      	add	r3, r1
 80002c4:	795b      	ldrb	r3, [r3, #5]
 80002c6:	4619      	mov	r1, r3
 80002c8:	7bbb      	ldrb	r3, [r7, #14]
 80002ca:	fa01 f303 	lsl.w	r3, r1, r3
 80002ce:	4618      	mov	r0, r3
 80002d0:	7bbb      	ldrb	r3, [r7, #14]
 80002d2:	2101      	movs	r1, #1
 80002d4:	fa01 f303 	lsl.w	r3, r1, r3
 80002d8:	4003      	ands	r3, r0
 80002da:	431a      	orrs	r2, r3
 80002dc:	693b      	ldr	r3, [r7, #16]
 80002de:	605a      	str	r2, [r3, #4]

				/** Configure output speed settings */
				REG_RMW32(&pReg->OSPEEDR.R,MASK_BITS(0x3U,pinNo*2U),((ConfigPtr[loopItr0]).PinSlewRate)<<(pinNo*2U));
 80002e0:	693b      	ldr	r3, [r7, #16]
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	7bbb      	ldrb	r3, [r7, #14]
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	2103      	movs	r1, #3
 80002ea:	fa01 f303 	lsl.w	r3, r1, r3
 80002ee:	43db      	mvns	r3, r3
 80002f0:	401a      	ands	r2, r3
 80002f2:	7dfb      	ldrb	r3, [r7, #23]
 80002f4:	00db      	lsls	r3, r3, #3
 80002f6:	6879      	ldr	r1, [r7, #4]
 80002f8:	440b      	add	r3, r1
 80002fa:	799b      	ldrb	r3, [r3, #6]
 80002fc:	4619      	mov	r1, r3
 80002fe:	7bbb      	ldrb	r3, [r7, #14]
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	4618      	mov	r0, r3
 8000308:	7bbb      	ldrb	r3, [r7, #14]
 800030a:	005b      	lsls	r3, r3, #1
 800030c:	2103      	movs	r1, #3
 800030e:	fa01 f303 	lsl.w	r3, r1, r3
 8000312:	4003      	ands	r3, r0
 8000314:	431a      	orrs	r2, r3
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	609a      	str	r2, [r3, #8]
			}

			/** Set the o/p default value before setting the pin direction */
			if( ((ConfigPtr[loopItr0]).PinInitValue) == SET)
 800031a:	7dfb      	ldrb	r3, [r7, #23]
 800031c:	00db      	lsls	r3, r3, #3
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	4413      	add	r3, r2
 8000322:	789b      	ldrb	r3, [r3, #2]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d10f      	bne.n	8000348 <Port_Init+0x160>
			{
				REG_RMW32(&pReg->BSRR.R,MASK_BITS(0x1U,pinNo),(SET)<<(pinNo));
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	699a      	ldr	r2, [r3, #24]
 800032c:	7bbb      	ldrb	r3, [r7, #14]
 800032e:	2101      	movs	r1, #1
 8000330:	fa01 f303 	lsl.w	r3, r1, r3
 8000334:	43db      	mvns	r3, r3
 8000336:	401a      	ands	r2, r3
 8000338:	7bbb      	ldrb	r3, [r7, #14]
 800033a:	2101      	movs	r1, #1
 800033c:	fa01 f303 	lsl.w	r3, r1, r3
 8000340:	431a      	orrs	r2, r3
 8000342:	693b      	ldr	r3, [r7, #16]
 8000344:	619a      	str	r2, [r3, #24]
 8000346:	e010      	b.n	800036a <Port_Init+0x182>
			}
			else
			{
				REG_RMW32(&pReg->BSRR.R,MASK_BITS(0x1U,(pinNo+16U)),(SET)<<(pinNo+16U));
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	699a      	ldr	r2, [r3, #24]
 800034c:	7bbb      	ldrb	r3, [r7, #14]
 800034e:	3310      	adds	r3, #16
 8000350:	2101      	movs	r1, #1
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	43db      	mvns	r3, r3
 8000358:	401a      	ands	r2, r3
 800035a:	7bbb      	ldrb	r3, [r7, #14]
 800035c:	3310      	adds	r3, #16
 800035e:	2101      	movs	r1, #1
 8000360:	fa01 f303 	lsl.w	r3, r1, r3
 8000364:	431a      	orrs	r2, r3
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	619a      	str	r2, [r3, #24]
			}

			/** Set the mode of the GPIO Pins */
			if( ((ConfigPtr[loopItr0]).PinMode)==PIN_MODE_GPIO && ((ConfigPtr[loopItr0]).PinDirection==PORT_PIN_IN) )
 800036a:	7dfb      	ldrb	r3, [r7, #23]
 800036c:	00db      	lsls	r3, r3, #3
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d112      	bne.n	800039e <Port_Init+0x1b6>
 8000378:	7dfb      	ldrb	r3, [r7, #23]
 800037a:	00db      	lsls	r3, r3, #3
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	4413      	add	r3, r2
 8000380:	785b      	ldrb	r3, [r3, #1]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d10b      	bne.n	800039e <Port_Init+0x1b6>
			{
				REG_RMW32(&pReg->MODER.R,MASK_BITS(0x3U,pinNo*2U),(PORT_PIN_IN)<<(pinNo*2U));
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	7bbb      	ldrb	r3, [r7, #14]
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	2103      	movs	r1, #3
 8000390:	fa01 f303 	lsl.w	r3, r1, r3
 8000394:	43db      	mvns	r3, r3
 8000396:	401a      	ands	r2, r3
 8000398:	693b      	ldr	r3, [r7, #16]
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	e074      	b.n	8000488 <Port_Init+0x2a0>
			}
			else if (((ConfigPtr[loopItr0]).PinMode)>=PIN_MODE_ALT_FUNC_0)
 800039e:	7dfb      	ldrb	r3, [r7, #23]
 80003a0:	00db      	lsls	r3, r3, #3
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	4413      	add	r3, r2
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	d950      	bls.n	800044e <Port_Init+0x266>
			{
				/** Select the Alternate Functionality in AFRL */
				if( pinNo < 8U )
 80003ac:	7bbb      	ldrb	r3, [r7, #14]
 80003ae:	2b07      	cmp	r3, #7
 80003b0:	d81b      	bhi.n	80003ea <Port_Init+0x202>
				{
					REG_RMW32(&pReg->AFRL.R,MASK_BITS(0xFU,pinNo*4U),(((ConfigPtr[loopItr0]).PinMode-4U))<<(pinNo*4U));
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	6a1a      	ldr	r2, [r3, #32]
 80003b6:	7bbb      	ldrb	r3, [r7, #14]
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	210f      	movs	r1, #15
 80003bc:	fa01 f303 	lsl.w	r3, r1, r3
 80003c0:	43db      	mvns	r3, r3
 80003c2:	401a      	ands	r2, r3
 80003c4:	7dfb      	ldrb	r3, [r7, #23]
 80003c6:	00db      	lsls	r3, r3, #3
 80003c8:	6879      	ldr	r1, [r7, #4]
 80003ca:	440b      	add	r3, r1
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	1f19      	subs	r1, r3, #4
 80003d0:	7bbb      	ldrb	r3, [r7, #14]
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	4099      	lsls	r1, r3
 80003d6:	7bbb      	ldrb	r3, [r7, #14]
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	200f      	movs	r0, #15
 80003dc:	fa00 f303 	lsl.w	r3, r0, r3
 80003e0:	400b      	ands	r3, r1
 80003e2:	431a      	orrs	r2, r3
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	621a      	str	r2, [r3, #32]
 80003e8:	e01a      	b.n	8000420 <Port_Init+0x238>
				}
				else /** Select the Alternate Functionality in AFRH */
				{
					REG_RMW32(&pReg->AFRH.R,MASK_BITS(0xFU,pinNo*4U),(((ConfigPtr[loopItr0]).PinMode-4U))<<(pinNo*4U));
 80003ea:	693b      	ldr	r3, [r7, #16]
 80003ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003ee:	7bbb      	ldrb	r3, [r7, #14]
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	210f      	movs	r1, #15
 80003f4:	fa01 f303 	lsl.w	r3, r1, r3
 80003f8:	43db      	mvns	r3, r3
 80003fa:	401a      	ands	r2, r3
 80003fc:	7dfb      	ldrb	r3, [r7, #23]
 80003fe:	00db      	lsls	r3, r3, #3
 8000400:	6879      	ldr	r1, [r7, #4]
 8000402:	440b      	add	r3, r1
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	1f19      	subs	r1, r3, #4
 8000408:	7bbb      	ldrb	r3, [r7, #14]
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	4099      	lsls	r1, r3
 800040e:	7bbb      	ldrb	r3, [r7, #14]
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	200f      	movs	r0, #15
 8000414:	fa00 f303 	lsl.w	r3, r0, r3
 8000418:	400b      	ands	r3, r1
 800041a:	431a      	orrs	r2, r3
 800041c:	693b      	ldr	r3, [r7, #16]
 800041e:	625a      	str	r2, [r3, #36]	; 0x24
				}
				REG_RMW32(&pReg->MODER.R,MASK_BITS(0x3U,pinNo*2U),(0x2U)<<(pinNo*2U));
 8000420:	693b      	ldr	r3, [r7, #16]
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	7bbb      	ldrb	r3, [r7, #14]
 8000426:	005b      	lsls	r3, r3, #1
 8000428:	2103      	movs	r1, #3
 800042a:	fa01 f303 	lsl.w	r3, r1, r3
 800042e:	43db      	mvns	r3, r3
 8000430:	401a      	ands	r2, r3
 8000432:	7bbb      	ldrb	r3, [r7, #14]
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	2102      	movs	r1, #2
 8000438:	4099      	lsls	r1, r3
 800043a:	7bbb      	ldrb	r3, [r7, #14]
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	2003      	movs	r0, #3
 8000440:	fa00 f303 	lsl.w	r3, r0, r3
 8000444:	400b      	ands	r3, r1
 8000446:	431a      	orrs	r2, r3
 8000448:	693b      	ldr	r3, [r7, #16]
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	e01c      	b.n	8000488 <Port_Init+0x2a0>
			}
			else
			{
				REG_RMW32(&pReg->MODER.R,MASK_BITS(0x3U,pinNo*2U),((ConfigPtr[loopItr0]).PinMode)<<(pinNo*2U));
 800044e:	693b      	ldr	r3, [r7, #16]
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	7bbb      	ldrb	r3, [r7, #14]
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	2103      	movs	r1, #3
 8000458:	fa01 f303 	lsl.w	r3, r1, r3
 800045c:	43db      	mvns	r3, r3
 800045e:	401a      	ands	r2, r3
 8000460:	7dfb      	ldrb	r3, [r7, #23]
 8000462:	00db      	lsls	r3, r3, #3
 8000464:	6879      	ldr	r1, [r7, #4]
 8000466:	440b      	add	r3, r1
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	4619      	mov	r1, r3
 800046c:	7bbb      	ldrb	r3, [r7, #14]
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	fa01 f303 	lsl.w	r3, r1, r3
 8000474:	4618      	mov	r0, r3
 8000476:	7bbb      	ldrb	r3, [r7, #14]
 8000478:	005b      	lsls	r3, r3, #1
 800047a:	2103      	movs	r1, #3
 800047c:	fa01 f303 	lsl.w	r3, r1, r3
 8000480:	4003      	ands	r3, r0
 8000482:	431a      	orrs	r2, r3
 8000484:	693b      	ldr	r3, [r7, #16]
 8000486:	601a      	str	r2, [r3, #0]
	for(loopItr0=0U; loopItr0<TOTAL_NO_OF_PINS; loopItr0++)
 8000488:	7dfb      	ldrb	r3, [r7, #23]
 800048a:	3301      	adds	r3, #1
 800048c:	75fb      	strb	r3, [r7, #23]
 800048e:	7dfb      	ldrb	r3, [r7, #23]
 8000490:	2b8f      	cmp	r3, #143	; 0x8f
 8000492:	f67f aec7 	bls.w	8000224 <Port_Init+0x3c>
			}
		}
	}

#if(GPIO_PORT_LOCK == STD_ON)
	for(loopItr0 =0U; (loopItr0 < TOTAL_NO_OF_PORTS); loopItr0++)
 8000496:	2300      	movs	r3, #0
 8000498:	75fb      	strb	r3, [r7, #23]
 800049a:	e016      	b.n	80004ca <Port_Init+0x2e2>
 800049c:	200004c0 	.word	0x200004c0
 80004a0:	200004c4 	.word	0x200004c4
 80004a4:	20000000 	.word	0x20000000
	{
		if( ((portsConfigured>>loopItr0)&0x1U) == SET )
 80004a8:	8aba      	ldrh	r2, [r7, #20]
 80004aa:	7dfb      	ldrb	r3, [r7, #23]
 80004ac:	fa42 f303 	asr.w	r3, r2, r3
 80004b0:	f003 0301 	and.w	r3, r3, #1
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d005      	beq.n	80004c4 <Port_Init+0x2dc>
		{
			GPIO_Port_Lock(loopItr0,0xFFFF);  /** Locks all the pins of the port until next reset */
 80004b8:	7dfb      	ldrb	r3, [r7, #23]
 80004ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 f9ba 	bl	8000838 <GPIO_Port_Lock>
	for(loopItr0 =0U; (loopItr0 < TOTAL_NO_OF_PORTS); loopItr0++)
 80004c4:	7dfb      	ldrb	r3, [r7, #23]
 80004c6:	3301      	adds	r3, #1
 80004c8:	75fb      	strb	r3, [r7, #23]
 80004ca:	7dfb      	ldrb	r3, [r7, #23]
 80004cc:	2b08      	cmp	r3, #8
 80004ce:	d9eb      	bls.n	80004a8 <Port_Init+0x2c0>
		}
	}
#endif

	gu8_PortInitStatus = MODULE_INITIALIZED;
 80004d0:	4b02      	ldr	r3, [pc, #8]	; (80004dc <Port_Init+0x2f4>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	701a      	strb	r2, [r3, #0]

}
 80004d6:	3718      	adds	r7, #24
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	200004c0 	.word	0x200004c0

080004e0 <Port_SetPinDirection>:

#if(PORT_SET_PIN_DIRECTION_API == STD_ON)
void Port_SetPinDirection (Port_PinType Pin,Port_PinDirectionType Direction)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	460a      	mov	r2, r1
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	4613      	mov	r3, r2
 80004ee:	71bb      	strb	r3, [r7, #6]
	if((gu8_PortInitStatus != MODULE_INITIALIZED)||(Pin>TOTAL_NO_OF_PINS))
 80004f0:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <Port_SetPinDirection+0x84>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d12d      	bne.n	8000554 <Port_SetPinDirection+0x74>
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	2b90      	cmp	r3, #144	; 0x90
 80004fc:	d82a      	bhi.n	8000554 <Port_SetPinDirection+0x74>
	{
		return;
	}

	if( (GlobalConfigPtr[Pin]).PinDirectionChangeable == FALSE )
 80004fe:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <Port_SetPinDirection+0x88>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	00db      	lsls	r3, r3, #3
 8000506:	4413      	add	r3, r2
 8000508:	78db      	ldrb	r3, [r3, #3]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d024      	beq.n	8000558 <Port_SetPinDirection+0x78>
	{
		return;
	}

	volatile  GPIO_RegTypes * pReg = 0U;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
	uint8_t moduleNo = Pin/16U;
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	091b      	lsrs	r3, r3, #4
 8000516:	72fb      	strb	r3, [r7, #11]

	pReg = (GPIO_RegTypes *)Gpio_BaseAddress[moduleNo];
 8000518:	7afb      	ldrb	r3, [r7, #11]
 800051a:	4a14      	ldr	r2, [pc, #80]	; (800056c <Port_SetPinDirection+0x8c>)
 800051c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000520:	60fb      	str	r3, [r7, #12]
	REG_RMW32(&pReg->MODER.R,MASK_BITS(0x3U,Pin*2U),(Direction)<<(Pin*2U));
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	2103      	movs	r1, #3
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	43db      	mvns	r3, r3
 8000532:	401a      	ands	r2, r3
 8000534:	79b9      	ldrb	r1, [r7, #6]
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	4618      	mov	r0, r3
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	2103      	movs	r1, #3
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	4003      	ands	r3, r0
 800054c:	431a      	orrs	r2, r3
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	e002      	b.n	800055a <Port_SetPinDirection+0x7a>
		return;
 8000554:	bf00      	nop
 8000556:	e000      	b.n	800055a <Port_SetPinDirection+0x7a>
		return;
 8000558:	bf00      	nop
}
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	200004c0 	.word	0x200004c0
 8000568:	200004c4 	.word	0x200004c4
 800056c:	20000000 	.word	0x20000000

08000570 <Port_RefreshPortDirection>:
#endif

void Port_RefreshPortDirection (void)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
	if(gu8_PortInitStatus != MODULE_INITIALIZED)
 8000576:	4b54      	ldr	r3, [pc, #336]	; (80006c8 <Port_RefreshPortDirection+0x158>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b01      	cmp	r3, #1
 800057c:	f040 809f 	bne.w	80006be <Port_RefreshPortDirection+0x14e>
	{
		return;
	}

	volatile  GPIO_RegTypes * pReg = 0U;
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
	uint8_t loopItr0 = 0U;
 8000584:	2300      	movs	r3, #0
 8000586:	73fb      	strb	r3, [r7, #15]
	uint8_t moduleNo = 0U;
 8000588:	2300      	movs	r3, #0
 800058a:	71fb      	strb	r3, [r7, #7]
	uint8_t pinNo = 0U;
 800058c:	2300      	movs	r3, #0
 800058e:	71bb      	strb	r3, [r7, #6]

	for(loopItr0=0U; loopItr0<TOTAL_NO_OF_PINS; loopItr0++)
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	e08e      	b.n	80006b4 <Port_RefreshPortDirection+0x144>
	{
		moduleNo = loopItr0/16U;
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	091b      	lsrs	r3, r3, #4
 800059a:	71fb      	strb	r3, [r7, #7]
		pinNo = loopItr0%16U;
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	f003 030f 	and.w	r3, r3, #15
 80005a2:	71bb      	strb	r3, [r7, #6]
		pReg = (GPIO_RegTypes *)Gpio_BaseAddress[moduleNo];
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	4a49      	ldr	r2, [pc, #292]	; (80006cc <Port_RefreshPortDirection+0x15c>)
 80005a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ac:	60bb      	str	r3, [r7, #8]

		if(((GlobalConfigPtr[loopItr0]).PinMode != PIN_UNUSED) && (GlobalConfigPtr[loopItr0]).PinDirectionChangeable == FALSE )
 80005ae:	4b48      	ldr	r3, [pc, #288]	; (80006d0 <Port_RefreshPortDirection+0x160>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	00db      	lsls	r3, r3, #3
 80005b6:	4413      	add	r3, r2
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2bff      	cmp	r3, #255	; 0xff
 80005bc:	d077      	beq.n	80006ae <Port_RefreshPortDirection+0x13e>
 80005be:	4b44      	ldr	r3, [pc, #272]	; (80006d0 <Port_RefreshPortDirection+0x160>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	4413      	add	r3, r2
 80005c8:	78db      	ldrb	r3, [r3, #3]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d16f      	bne.n	80006ae <Port_RefreshPortDirection+0x13e>
		{
			/** Set the o/p default value before setting the pin direction */
			if( ((GlobalConfigPtr[loopItr0]).PinInitValue) == SET)
 80005ce:	4b40      	ldr	r3, [pc, #256]	; (80006d0 <Port_RefreshPortDirection+0x160>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	00db      	lsls	r3, r3, #3
 80005d6:	4413      	add	r3, r2
 80005d8:	789b      	ldrb	r3, [r3, #2]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d10f      	bne.n	80005fe <Port_RefreshPortDirection+0x8e>
			{
				REG_RMW32(&pReg->BSRR.R,MASK_BITS(0x1U,pinNo),(SET)<<(pinNo));
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	699a      	ldr	r2, [r3, #24]
 80005e2:	79bb      	ldrb	r3, [r7, #6]
 80005e4:	2101      	movs	r1, #1
 80005e6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ea:	43db      	mvns	r3, r3
 80005ec:	401a      	ands	r2, r3
 80005ee:	79bb      	ldrb	r3, [r7, #6]
 80005f0:	2101      	movs	r1, #1
 80005f2:	fa01 f303 	lsl.w	r3, r1, r3
 80005f6:	431a      	orrs	r2, r3
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	619a      	str	r2, [r3, #24]
 80005fc:	e013      	b.n	8000626 <Port_RefreshPortDirection+0xb6>
			}
			else
			{
				REG_RMW32(&pReg->BSRR.R,MASK_BITS(0x1U,pinNo),(SET)<<(pinNo+16U));
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	699a      	ldr	r2, [r3, #24]
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	2101      	movs	r1, #1
 8000606:	fa01 f303 	lsl.w	r3, r1, r3
 800060a:	43db      	mvns	r3, r3
 800060c:	401a      	ands	r2, r3
 800060e:	79bb      	ldrb	r3, [r7, #6]
 8000610:	3310      	adds	r3, #16
 8000612:	2101      	movs	r1, #1
 8000614:	4099      	lsls	r1, r3
 8000616:	79bb      	ldrb	r3, [r7, #6]
 8000618:	2001      	movs	r0, #1
 800061a:	fa00 f303 	lsl.w	r3, r0, r3
 800061e:	400b      	ands	r3, r1
 8000620:	431a      	orrs	r2, r3
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	619a      	str	r2, [r3, #24]
			}

			/** Set the mode of the GPIO Pins */
			if( ((GlobalConfigPtr[loopItr0]).PinMode)==PIN_MODE_GPIO && ((GlobalConfigPtr[loopItr0]).PinDirection==PORT_PIN_IN) )
 8000626:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <Port_RefreshPortDirection+0x160>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	00db      	lsls	r3, r3, #3
 800062e:	4413      	add	r3, r2
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d113      	bne.n	800065e <Port_RefreshPortDirection+0xee>
 8000636:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <Port_RefreshPortDirection+0x160>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	00db      	lsls	r3, r3, #3
 800063e:	4413      	add	r3, r2
 8000640:	785b      	ldrb	r3, [r3, #1]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d10b      	bne.n	800065e <Port_RefreshPortDirection+0xee>
			{
				REG_RMW32(&pReg->MODER.R,MASK_BITS(0x3U,pinNo*2U),(PORT_PIN_IN)<<(pinNo*2U));
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	2103      	movs	r1, #3
 8000650:	fa01 f303 	lsl.w	r3, r1, r3
 8000654:	43db      	mvns	r3, r3
 8000656:	401a      	ands	r2, r3
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	e027      	b.n	80006ae <Port_RefreshPortDirection+0x13e>
			}
			else if ( ((GlobalConfigPtr[loopItr0]).PinMode)==PIN_MODE_GPIO && ((GlobalConfigPtr[loopItr0]).PinDirection==PORT_PIN_OUT) )
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <Port_RefreshPortDirection+0x160>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	00db      	lsls	r3, r3, #3
 8000666:	4413      	add	r3, r2
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d11f      	bne.n	80006ae <Port_RefreshPortDirection+0x13e>
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <Port_RefreshPortDirection+0x160>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	4413      	add	r3, r2
 8000678:	785b      	ldrb	r3, [r3, #1]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d117      	bne.n	80006ae <Port_RefreshPortDirection+0x13e>
			{
				REG_RMW32(&pReg->MODER.R,MASK_BITS(0x3U,pinNo*2U),(PORT_PIN_OUT)<<(pinNo*2U));
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	2103      	movs	r1, #3
 8000688:	fa01 f303 	lsl.w	r3, r1, r3
 800068c:	43db      	mvns	r3, r3
 800068e:	401a      	ands	r2, r3
 8000690:	79bb      	ldrb	r3, [r7, #6]
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	2101      	movs	r1, #1
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	4618      	mov	r0, r3
 800069c:	79bb      	ldrb	r3, [r7, #6]
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	2103      	movs	r1, #3
 80006a2:	fa01 f303 	lsl.w	r3, r1, r3
 80006a6:	4003      	ands	r3, r0
 80006a8:	431a      	orrs	r2, r3
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	601a      	str	r2, [r3, #0]
	for(loopItr0=0U; loopItr0<TOTAL_NO_OF_PINS; loopItr0++)
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
 80006b0:	3301      	adds	r3, #1
 80006b2:	73fb      	strb	r3, [r7, #15]
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2b8f      	cmp	r3, #143	; 0x8f
 80006b8:	f67f af6d 	bls.w	8000596 <Port_RefreshPortDirection+0x26>
 80006bc:	e000      	b.n	80006c0 <Port_RefreshPortDirection+0x150>
		return;
 80006be:	bf00      	nop
		else
		{
			/** Do Nothing */;
		}
	}
}
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	200004c0 	.word	0x200004c0
 80006cc:	20000000 	.word	0x20000000
 80006d0:	200004c4 	.word	0x200004c4

080006d4 <Port_SetPinMode>:

#if(PORT_SET_PIN_MODE_API == STD_ON)
void Port_SetPinMode (Port_PinType Pin,Port_PinModeType Mode)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	71bb      	strb	r3, [r7, #6]
	if((gu8_PortInitStatus != MODULE_INITIALIZED)||(Pin>TOTAL_NO_OF_PINS))
 80006e4:	4b51      	ldr	r3, [pc, #324]	; (800082c <Port_SetPinMode+0x158>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	f040 8097 	bne.w	800081c <Port_SetPinMode+0x148>
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b90      	cmp	r3, #144	; 0x90
 80006f2:	f200 8093 	bhi.w	800081c <Port_SetPinMode+0x148>
	{
		return;
	}

	if( (GlobalConfigPtr[Pin]).PinModeChangeable == FALSE )
 80006f6:	4b4e      	ldr	r3, [pc, #312]	; (8000830 <Port_SetPinMode+0x15c>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	4413      	add	r3, r2
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	2b00      	cmp	r3, #0
 8000704:	f000 808c 	beq.w	8000820 <Port_SetPinMode+0x14c>
	{
		return;
	}

	volatile  GPIO_RegTypes * pReg = 0U;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
	uint8_t moduleNo = Pin/16U;
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	091b      	lsrs	r3, r3, #4
 8000710:	72fb      	strb	r3, [r7, #11]
	uint8_t PinNo = Pin%16U;
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 030f 	and.w	r3, r3, #15
 8000718:	72bb      	strb	r3, [r7, #10]

	pReg = (GPIO_RegTypes *)Gpio_BaseAddress[moduleNo];
 800071a:	7afb      	ldrb	r3, [r7, #11]
 800071c:	4a45      	ldr	r2, [pc, #276]	; (8000834 <Port_SetPinMode+0x160>)
 800071e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000722:	60fb      	str	r3, [r7, #12]
	if( (Mode)==PIN_MODE_GPIO && ((GlobalConfigPtr[Pin]).PinDirection==PORT_PIN_IN) )
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d113      	bne.n	8000752 <Port_SetPinMode+0x7e>
 800072a:	4b41      	ldr	r3, [pc, #260]	; (8000830 <Port_SetPinMode+0x15c>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	4413      	add	r3, r2
 8000734:	785b      	ldrb	r3, [r3, #1]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d10b      	bne.n	8000752 <Port_SetPinMode+0x7e>
	{
		REG_RMW32(&pReg->MODER.R,MASK_BITS(0x3U,PinNo*2U),(PORT_PIN_IN)<<(PinNo*2U));
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	7abb      	ldrb	r3, [r7, #10]
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	2103      	movs	r1, #3
 8000744:	fa01 f303 	lsl.w	r3, r1, r3
 8000748:	43db      	mvns	r3, r3
 800074a:	401a      	ands	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	e067      	b.n	8000822 <Port_SetPinMode+0x14e>
	}
	else if ((Mode)>=PIN_MODE_ALT_FUNC_0)
 8000752:	79bb      	ldrb	r3, [r7, #6]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d948      	bls.n	80007ea <Port_SetPinMode+0x116>
	{
		/** Select the Alternate Functionality in AFRL */
		if( (PinNo) < 8U )
 8000758:	7abb      	ldrb	r3, [r7, #10]
 800075a:	2b07      	cmp	r3, #7
 800075c:	d817      	bhi.n	800078e <Port_SetPinMode+0xba>
		{
			REG_RMW32(&pReg->AFRL.R,MASK_BITS(0xFU,PinNo*4U),(Mode-4U)<<(PinNo*4U));
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6a1a      	ldr	r2, [r3, #32]
 8000762:	7abb      	ldrb	r3, [r7, #10]
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	210f      	movs	r1, #15
 8000768:	fa01 f303 	lsl.w	r3, r1, r3
 800076c:	43db      	mvns	r3, r3
 800076e:	401a      	ands	r2, r3
 8000770:	79bb      	ldrb	r3, [r7, #6]
 8000772:	1f19      	subs	r1, r3, #4
 8000774:	7abb      	ldrb	r3, [r7, #10]
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	4099      	lsls	r1, r3
 800077a:	7abb      	ldrb	r3, [r7, #10]
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	200f      	movs	r0, #15
 8000780:	fa00 f303 	lsl.w	r3, r0, r3
 8000784:	400b      	ands	r3, r1
 8000786:	431a      	orrs	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	621a      	str	r2, [r3, #32]
 800078c:	e016      	b.n	80007bc <Port_SetPinMode+0xe8>
		}
		else /** Select the Alternate Functionality in AFRH */
		{
			REG_RMW32(&pReg->AFRH.R,MASK_BITS(0xFU,PinNo*4U),(Mode-4U)<<(PinNo*4U));
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000792:	7abb      	ldrb	r3, [r7, #10]
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	210f      	movs	r1, #15
 8000798:	fa01 f303 	lsl.w	r3, r1, r3
 800079c:	43db      	mvns	r3, r3
 800079e:	401a      	ands	r2, r3
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	1f19      	subs	r1, r3, #4
 80007a4:	7abb      	ldrb	r3, [r7, #10]
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4099      	lsls	r1, r3
 80007aa:	7abb      	ldrb	r3, [r7, #10]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	200f      	movs	r0, #15
 80007b0:	fa00 f303 	lsl.w	r3, r0, r3
 80007b4:	400b      	ands	r3, r1
 80007b6:	431a      	orrs	r2, r3
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	625a      	str	r2, [r3, #36]	; 0x24
		}
		REG_RMW32(&pReg->MODER.R,MASK_BITS(0x3U,PinNo*2U),(0x2U)<<(PinNo*2U));
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	7abb      	ldrb	r3, [r7, #10]
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	2103      	movs	r1, #3
 80007c6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ca:	43db      	mvns	r3, r3
 80007cc:	401a      	ands	r2, r3
 80007ce:	7abb      	ldrb	r3, [r7, #10]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	2102      	movs	r1, #2
 80007d4:	4099      	lsls	r1, r3
 80007d6:	7abb      	ldrb	r3, [r7, #10]
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	2003      	movs	r0, #3
 80007dc:	fa00 f303 	lsl.w	r3, r0, r3
 80007e0:	400b      	ands	r3, r1
 80007e2:	431a      	orrs	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	e01b      	b.n	8000822 <Port_SetPinMode+0x14e>
	}
	else
	{
		REG_RMW32(&pReg->MODER.R,MASK_BITS(0x3U,PinNo*2U),(Mode)<<(PinNo*2U));
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	7abb      	ldrb	r3, [r7, #10]
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	2103      	movs	r1, #3
 80007f4:	fa01 f303 	lsl.w	r3, r1, r3
 80007f8:	43db      	mvns	r3, r3
 80007fa:	401a      	ands	r2, r3
 80007fc:	79b9      	ldrb	r1, [r7, #6]
 80007fe:	7abb      	ldrb	r3, [r7, #10]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	4618      	mov	r0, r3
 8000808:	7abb      	ldrb	r3, [r7, #10]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	2103      	movs	r1, #3
 800080e:	fa01 f303 	lsl.w	r3, r1, r3
 8000812:	4003      	ands	r3, r0
 8000814:	431a      	orrs	r2, r3
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	e002      	b.n	8000822 <Port_SetPinMode+0x14e>
		return;
 800081c:	bf00      	nop
 800081e:	e000      	b.n	8000822 <Port_SetPinMode+0x14e>
		return;
 8000820:	bf00      	nop
	}
}
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	200004c0 	.word	0x200004c0
 8000830:	200004c4 	.word	0x200004c4
 8000834:	20000000 	.word	0x20000000

08000838 <GPIO_Port_Lock>:
#endif

#if(GPIO_PORT_LOCK == STD_ON)
void GPIO_Port_Lock(uint8_t moduleNo, uint16_t lockMask)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	460a      	mov	r2, r1
 8000842:	71fb      	strb	r3, [r7, #7]
 8000844:	4613      	mov	r3, r2
 8000846:	80bb      	strh	r3, [r7, #4]
	const uint32_t lockBit = 0x00010000;
 8000848:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800084c:	60fb      	str	r3, [r7, #12]
	volatile  GPIO_RegTypes * pReg = 0U;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
	pReg = (GPIO_RegTypes *)Gpio_BaseAddress[moduleNo];
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <GPIO_Port_Lock+0x58>)
 8000856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800085a:	60bb      	str	r3, [r7, #8]
	lockMask = lockMask&0x0000FFFF;
	REG_WRITE32(&pReg->LCKR.R,(uint32_t)(lockBit|lockMask));
 800085c:	88ba      	ldrh	r2, [r7, #4]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	431a      	orrs	r2, r3
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	61da      	str	r2, [r3, #28]
	REG_WRITE32(&pReg->LCKR.R,(uint32_t)(0x00000000U|lockMask));
 8000866:	88ba      	ldrh	r2, [r7, #4]
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	61da      	str	r2, [r3, #28]
	REG_WRITE32(&pReg->LCKR.R,(uint32_t)(lockBit|lockMask));
 800086c:	88ba      	ldrh	r2, [r7, #4]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	431a      	orrs	r2, r3
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	61da      	str	r2, [r3, #28]
	REG_READ32(&pReg->LCKR.R);
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	69db      	ldr	r3, [r3, #28]
	while(REG_READ32((&pReg->LCKR.R)>>16U)!=SET);
 800087a:	bf00      	nop
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	0c1b      	lsrs	r3, r3, #16
 8000882:	2b01      	cmp	r3, #1
 8000884:	d1fa      	bne.n	800087c <GPIO_Port_Lock+0x44>
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	20000000 	.word	0x20000000

08000894 <GPIO_Port_Unlock>:

void GPIO_Port_Unlock(uint8_t moduleNo)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	GPIO_Reset_Port(moduleNo);
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f811 	bl	80008c8 <GPIO_Reset_Port>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <GPIO_Port_Enable>:
#endif

void GPIO_Port_Enable(uint8_t portNo)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	4603      	mov	r3, r0
 80008b6:	71fb      	strb	r3, [r7, #7]
	RCC_AHB1PeripheralClkEnable(portNo);	/** Turns on the Clock for the configured Port */
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f812 	bl	80008e4 <RCC_AHB1PeripheralClkEnable>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <GPIO_Reset_Port>:
{
	RCC_AHB1PeripheralClkDisable(portNo);	/** Turns off the Clock for the configured Port */
}

void GPIO_Reset_Port(uint8_t portNo)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	RCC_ResetAHB1Peripheral(portNo);		/** Resets the configured Port */
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 f821 	bl	800091c <RCC_ResetAHB1Peripheral>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <RCC_AHB1PeripheralClkEnable>:

	}
}

void RCC_AHB1PeripheralClkEnable(Rcc_AHB1_Peripherals peripheral)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
	REG_RMW32(RCC_AHB1ENR,SET_BIT(peripheral) ,SET_BIT(peripheral) );
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <RCC_AHB1PeripheralClkEnable+0x34>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2101      	movs	r1, #1
 80008f6:	fa01 f303 	lsl.w	r3, r1, r3
 80008fa:	43db      	mvns	r3, r3
 80008fc:	401a      	ands	r2, r3
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2101      	movs	r1, #1
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	4904      	ldr	r1, [pc, #16]	; (8000918 <RCC_AHB1PeripheralClkEnable+0x34>)
 8000908:	4313      	orrs	r3, r2
 800090a:	600b      	str	r3, [r1, #0]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40023830 	.word	0x40023830

0800091c <RCC_ResetAHB1Peripheral>:
{
	REG_RMW32(RCC_APB2LPENR,SET_BIT(peripheral) ,CLEAR_BIT(peripheral) );
}

void RCC_ResetAHB1Peripheral(Rcc_AHB1_Peripherals peripheral)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	REG_WRITE32(RCC_AHB1RSTR, SET_BIT(peripheral) );
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	4a08      	ldr	r2, [pc, #32]	; (800094c <RCC_ResetAHB1Peripheral+0x30>)
 800092a:	2101      	movs	r1, #1
 800092c:	fa01 f303 	lsl.w	r3, r1, r3
 8000930:	6013      	str	r3, [r2, #0]
	REG_WRITE32(RCC_AHB1RSTR, CLEAR_BIT(peripheral) );
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2201      	movs	r2, #1
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	4a04      	ldr	r2, [pc, #16]	; (800094c <RCC_ResetAHB1Peripheral+0x30>)
 800093c:	43db      	mvns	r3, r3
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40023810 	.word	0x40023810

08000950 <main>:
#include "Reg_Macros.h"
#include "RCC.h"
#include "Gpio.h"

int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	//RCC_AHB1PeripheralClkEnable(EN_GPIOA);
	Port_Init (&Port_Config0);
 8000954:	4812      	ldr	r0, [pc, #72]	; (80009a0 <main+0x50>)
 8000956:	f7ff fc47 	bl	80001e8 <Port_Init>

#if(GPIO_PORT_LOCK == STD_ON)
	GPIO_A.MODER.B.ModeR1 = 0x1U; /** should not change*/
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <main+0x54>)
 800095c:	6813      	ldr	r3, [r2, #0]
 800095e:	2101      	movs	r1, #1
 8000960:	f361 0383 	bfi	r3, r1, #2, #2
 8000964:	6013      	str	r3, [r2, #0]
	GPIO_Port_Unlock(0U);
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff ff94 	bl	8000894 <GPIO_Port_Unlock>
	GPIO_A.MODER.B.ModeR1 = 0x1U; /** should change*/
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <main+0x54>)
 800096e:	6813      	ldr	r3, [r2, #0]
 8000970:	2101      	movs	r1, #1
 8000972:	f361 0383 	bfi	r3, r1, #2, #2
 8000976:	6013      	str	r3, [r2, #0]
#endif
	Port_SetPinDirection(GPIO_A_PIN_1,PORT_PIN_OUT);
 8000978:	2101      	movs	r1, #1
 800097a:	2001      	movs	r0, #1
 800097c:	f7ff fdb0 	bl	80004e0 <Port_SetPinDirection>
	Port_RefreshPortDirection();
 8000980:	f7ff fdf6 	bl	8000570 <Port_RefreshPortDirection>
	Port_SetPinMode(GPIO_A_PIN_1,PIN_MODE_ANALOG);
 8000984:	2103      	movs	r1, #3
 8000986:	2001      	movs	r0, #1
 8000988:	f7ff fea4 	bl	80006d4 <Port_SetPinMode>
	Port_SetPinMode(GPIO_A_PIN_1,PIN_MODE_ALT_FUNC_8);
 800098c:	210c      	movs	r1, #12
 800098e:	2001      	movs	r0, #1
 8000990:	f7ff fea0 	bl	80006d4 <Port_SetPinMode>
	Port_SetPinMode(GPIO_A_PIN_1,PIN_MODE_GPIO);
 8000994:	2101      	movs	r1, #1
 8000996:	2001      	movs	r0, #1
 8000998:	f7ff fe9c 	bl	80006d4 <Port_SetPinMode>
	if((GPIO_B.MODER.B.ModeR1)==0x1U)
	{
		RCC_AHB1PeripheralClkEnable(EN_GPIOC);
	}
#endif
	for(;;);
 800099c:	e7fe      	b.n	800099c <main+0x4c>
 800099e:	bf00      	nop
 80009a0:	20000024 	.word	0x20000024
 80009a4:	40020000 	.word	0x40020000

080009a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ae:	490e      	ldr	r1, [pc, #56]	; (80009e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b0:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <LoopForever+0xe>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c4:	4c0b      	ldr	r4, [pc, #44]	; (80009f4 <LoopForever+0x16>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009d2:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80009d6:	f000 f811 	bl	80009fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009da:	f7ff ffb9 	bl	8000950 <main>

080009de <LoopForever>:

LoopForever:
    b LoopForever
 80009de:	e7fe      	b.n	80009de <LoopForever>
  ldr   r0, =_estack
 80009e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	200004a4 	.word	0x200004a4
  ldr r2, =_sidata
 80009ec:	08000a64 	.word	0x08000a64
  ldr r2, =_sbss
 80009f0:	200004a4 	.word	0x200004a4
  ldr r4, =_ebss
 80009f4:	200004c8 	.word	0x200004c8

080009f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC_IRQHandler>
	...

080009fc <__libc_init_array>:
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	4e0d      	ldr	r6, [pc, #52]	; (8000a34 <__libc_init_array+0x38>)
 8000a00:	4c0d      	ldr	r4, [pc, #52]	; (8000a38 <__libc_init_array+0x3c>)
 8000a02:	1ba4      	subs	r4, r4, r6
 8000a04:	10a4      	asrs	r4, r4, #2
 8000a06:	2500      	movs	r5, #0
 8000a08:	42a5      	cmp	r5, r4
 8000a0a:	d109      	bne.n	8000a20 <__libc_init_array+0x24>
 8000a0c:	4e0b      	ldr	r6, [pc, #44]	; (8000a3c <__libc_init_array+0x40>)
 8000a0e:	4c0c      	ldr	r4, [pc, #48]	; (8000a40 <__libc_init_array+0x44>)
 8000a10:	f000 f818 	bl	8000a44 <_init>
 8000a14:	1ba4      	subs	r4, r4, r6
 8000a16:	10a4      	asrs	r4, r4, #2
 8000a18:	2500      	movs	r5, #0
 8000a1a:	42a5      	cmp	r5, r4
 8000a1c:	d105      	bne.n	8000a2a <__libc_init_array+0x2e>
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a24:	4798      	blx	r3
 8000a26:	3501      	adds	r5, #1
 8000a28:	e7ee      	b.n	8000a08 <__libc_init_array+0xc>
 8000a2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a2e:	4798      	blx	r3
 8000a30:	3501      	adds	r5, #1
 8000a32:	e7f2      	b.n	8000a1a <__libc_init_array+0x1e>
 8000a34:	08000a5c 	.word	0x08000a5c
 8000a38:	08000a5c 	.word	0x08000a5c
 8000a3c:	08000a5c 	.word	0x08000a5c
 8000a40:	08000a60 	.word	0x08000a60

08000a44 <_init>:
 8000a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a46:	bf00      	nop
 8000a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a4a:	bc08      	pop	{r3}
 8000a4c:	469e      	mov	lr, r3
 8000a4e:	4770      	bx	lr

08000a50 <_fini>:
 8000a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a52:	bf00      	nop
 8000a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a56:	bc08      	pop	{r3}
 8000a58:	469e      	mov	lr, r3
 8000a5a:	4770      	bx	lr
