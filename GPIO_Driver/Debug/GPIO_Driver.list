
GPIO_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004cc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000674  08000674  000204a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000674  08000674  000204a4  2**0
                  CONTENTS
  4 .ARM          00000000  08000674  08000674  000204a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000674  08000674  000204a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000674  08000674  00010674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000678  08000678  00010678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a4  20000000  0800067c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  200004a4  08000b20  000204a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08000b20  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003544  00000000  00000000  000204ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005f7  00000000  00000000  00023a12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000250  00000000  00000000  00024010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00001376  00000000  00000000  00024260  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00001826  00000000  00000000  000255d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000068e7  00000000  00000000  00026dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0002d6e3  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000200  00000000  00000000  0002d760  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  000008f8  00000000  00000000  0002d960  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	200004a4 	.word	0x200004a4
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800065c 	.word	0x0800065c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	200004a8 	.word	0x200004a8
 80001e4:	0800065c 	.word	0x0800065c

080001e8 <Port_Init>:

Port_ConfigType* GlobalConfigPtr;


void Port_Init (const Port_ConfigType* ConfigPtr)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	gu8_PortInitStatus = MODULE_UNINITIALIZED;
 80001f0:	4bae      	ldr	r3, [pc, #696]	; (80004ac <Port_Init+0x2c4>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	701a      	strb	r2, [r3, #0]
	volatile  GPIO_RegTypes * pReg = 0U;
 80001f6:	2300      	movs	r3, #0
 80001f8:	613b      	str	r3, [r7, #16]
	uint8_t loopItr0 = 0U;
 80001fa:	2300      	movs	r3, #0
 80001fc:	75fb      	strb	r3, [r7, #23]
	uint8_t moduleNo = 0U;
 80001fe:	2300      	movs	r3, #0
 8000200:	73fb      	strb	r3, [r7, #15]
	uint8_t pinNo = 0U;
 8000202:	2300      	movs	r3, #0
 8000204:	73bb      	strb	r3, [r7, #14]
	uint16_t portsConfigured = 0U;
 8000206:	2300      	movs	r3, #0
 8000208:	82bb      	strh	r3, [r7, #20]

	if(ConfigPtr == NULL_PTR)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d103      	bne.n	8000218 <Port_Init+0x30>
	{
		gu8_PortInitStatus = MODULE_INIT_FAILED;
 8000210:	4ba6      	ldr	r3, [pc, #664]	; (80004ac <Port_Init+0x2c4>)
 8000212:	2202      	movs	r2, #2
 8000214:	701a      	strb	r2, [r3, #0]
		return;
 8000216:	e166      	b.n	80004e6 <Port_Init+0x2fe>
	}

	GlobalConfigPtr = (Port_ConfigType*) ConfigPtr;
 8000218:	4aa5      	ldr	r2, [pc, #660]	; (80004b0 <Port_Init+0x2c8>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	6013      	str	r3, [r2, #0]

	for(loopItr0=0U; loopItr0<TOTAL_NO_OF_PINS; loopItr0++)
 800021e:	2300      	movs	r3, #0
 8000220:	75fb      	strb	r3, [r7, #23]
 8000222:	e13b      	b.n	800049c <Port_Init+0x2b4>
	{
		if((ConfigPtr[loopItr0]).PinMode != PIN_UNUSED)
 8000224:	7dfb      	ldrb	r3, [r7, #23]
 8000226:	00db      	lsls	r3, r3, #3
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	4413      	add	r3, r2
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	2bff      	cmp	r3, #255	; 0xff
 8000230:	f000 8131 	beq.w	8000496 <Port_Init+0x2ae>
		{
			moduleNo = loopItr0/16U;
 8000234:	7dfb      	ldrb	r3, [r7, #23]
 8000236:	091b      	lsrs	r3, r3, #4
 8000238:	73fb      	strb	r3, [r7, #15]
			pinNo = loopItr0%16U;
 800023a:	7dfb      	ldrb	r3, [r7, #23]
 800023c:	f003 030f 	and.w	r3, r3, #15
 8000240:	73bb      	strb	r3, [r7, #14]
			GPIO_Port_Enable(moduleNo);	/** Turns on the Clock for the configured Port */
 8000242:	7bfb      	ldrb	r3, [r7, #15]
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f981 	bl	800054c <GPIO_Port_Enable>
			pReg = (GPIO_RegTypes *)Gpio_BaseAddress[moduleNo];
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	4a99      	ldr	r2, [pc, #612]	; (80004b4 <Port_Init+0x2cc>)
 800024e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000252:	613b      	str	r3, [r7, #16]

			portsConfigured |= SET_BIT(moduleNo);
 8000254:	7bfb      	ldrb	r3, [r7, #15]
 8000256:	2201      	movs	r2, #1
 8000258:	fa02 f303 	lsl.w	r3, r2, r3
 800025c:	b29a      	uxth	r2, r3
 800025e:	8abb      	ldrh	r3, [r7, #20]
 8000260:	4313      	orrs	r3, r2
 8000262:	82bb      	strh	r3, [r7, #20]

			/** Configure the Pull Up/Down settings */
			REG_RMW32(&pReg->PUPDR.R,MASK_BITS(0x3U,pinNo*2U),((ConfigPtr[loopItr0]).PinPupDown)<<(pinNo*2U));
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	68da      	ldr	r2, [r3, #12]
 8000268:	7bbb      	ldrb	r3, [r7, #14]
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	2103      	movs	r1, #3
 800026e:	fa01 f303 	lsl.w	r3, r1, r3
 8000272:	43db      	mvns	r3, r3
 8000274:	401a      	ands	r2, r3
 8000276:	7dfb      	ldrb	r3, [r7, #23]
 8000278:	00db      	lsls	r3, r3, #3
 800027a:	6879      	ldr	r1, [r7, #4]
 800027c:	440b      	add	r3, r1
 800027e:	79db      	ldrb	r3, [r3, #7]
 8000280:	4619      	mov	r1, r3
 8000282:	7bbb      	ldrb	r3, [r7, #14]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	fa01 f303 	lsl.w	r3, r1, r3
 800028a:	4618      	mov	r0, r3
 800028c:	7bbb      	ldrb	r3, [r7, #14]
 800028e:	005b      	lsls	r3, r3, #1
 8000290:	2103      	movs	r1, #3
 8000292:	fa01 f303 	lsl.w	r3, r1, r3
 8000296:	4003      	ands	r3, r0
 8000298:	431a      	orrs	r2, r3
 800029a:	693b      	ldr	r3, [r7, #16]
 800029c:	60da      	str	r2, [r3, #12]

			/** Select the output settings */
			if(((ConfigPtr[loopItr0]).PinDirection)==PORT_PIN_OUT)
 800029e:	7dfb      	ldrb	r3, [r7, #23]
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	4413      	add	r3, r2
 80002a6:	785b      	ldrb	r3, [r3, #1]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d136      	bne.n	800031a <Port_Init+0x132>
			{
				REG_RMW32(&pReg->OTYPER.R,MASK_BITS(0x1U,pinNo),((ConfigPtr[loopItr0]).PinOutputMode)<<(pinNo));
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	7bbb      	ldrb	r3, [r7, #14]
 80002b2:	2101      	movs	r1, #1
 80002b4:	fa01 f303 	lsl.w	r3, r1, r3
 80002b8:	43db      	mvns	r3, r3
 80002ba:	401a      	ands	r2, r3
 80002bc:	7dfb      	ldrb	r3, [r7, #23]
 80002be:	00db      	lsls	r3, r3, #3
 80002c0:	6879      	ldr	r1, [r7, #4]
 80002c2:	440b      	add	r3, r1
 80002c4:	795b      	ldrb	r3, [r3, #5]
 80002c6:	4619      	mov	r1, r3
 80002c8:	7bbb      	ldrb	r3, [r7, #14]
 80002ca:	fa01 f303 	lsl.w	r3, r1, r3
 80002ce:	4618      	mov	r0, r3
 80002d0:	7bbb      	ldrb	r3, [r7, #14]
 80002d2:	2101      	movs	r1, #1
 80002d4:	fa01 f303 	lsl.w	r3, r1, r3
 80002d8:	4003      	ands	r3, r0
 80002da:	431a      	orrs	r2, r3
 80002dc:	693b      	ldr	r3, [r7, #16]
 80002de:	605a      	str	r2, [r3, #4]

				/** Configure output speed settings */
				REG_RMW32(&pReg->OSPEEDR.R,MASK_BITS(0x3U,pinNo*2U),((ConfigPtr[loopItr0]).PinSlewRate)<<(pinNo*2U));
 80002e0:	693b      	ldr	r3, [r7, #16]
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	7bbb      	ldrb	r3, [r7, #14]
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	2103      	movs	r1, #3
 80002ea:	fa01 f303 	lsl.w	r3, r1, r3
 80002ee:	43db      	mvns	r3, r3
 80002f0:	401a      	ands	r2, r3
 80002f2:	7dfb      	ldrb	r3, [r7, #23]
 80002f4:	00db      	lsls	r3, r3, #3
 80002f6:	6879      	ldr	r1, [r7, #4]
 80002f8:	440b      	add	r3, r1
 80002fa:	799b      	ldrb	r3, [r3, #6]
 80002fc:	4619      	mov	r1, r3
 80002fe:	7bbb      	ldrb	r3, [r7, #14]
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	4618      	mov	r0, r3
 8000308:	7bbb      	ldrb	r3, [r7, #14]
 800030a:	005b      	lsls	r3, r3, #1
 800030c:	2103      	movs	r1, #3
 800030e:	fa01 f303 	lsl.w	r3, r1, r3
 8000312:	4003      	ands	r3, r0
 8000314:	431a      	orrs	r2, r3
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	609a      	str	r2, [r3, #8]
			}

			/** Set the o/p default value before setting the pin direction */
			if( ((ConfigPtr[loopItr0]).PinInitValue) == SET)
 800031a:	7dfb      	ldrb	r3, [r7, #23]
 800031c:	00db      	lsls	r3, r3, #3
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	4413      	add	r3, r2
 8000322:	789b      	ldrb	r3, [r3, #2]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d10f      	bne.n	8000348 <Port_Init+0x160>
			{
				REG_RMW32(&pReg->BSRR.R,MASK_BITS(0x1U,pinNo),(SET)<<(pinNo));
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	699a      	ldr	r2, [r3, #24]
 800032c:	7bbb      	ldrb	r3, [r7, #14]
 800032e:	2101      	movs	r1, #1
 8000330:	fa01 f303 	lsl.w	r3, r1, r3
 8000334:	43db      	mvns	r3, r3
 8000336:	401a      	ands	r2, r3
 8000338:	7bbb      	ldrb	r3, [r7, #14]
 800033a:	2101      	movs	r1, #1
 800033c:	fa01 f303 	lsl.w	r3, r1, r3
 8000340:	431a      	orrs	r2, r3
 8000342:	693b      	ldr	r3, [r7, #16]
 8000344:	619a      	str	r2, [r3, #24]
 8000346:	e013      	b.n	8000370 <Port_Init+0x188>
			}
			else
			{
				REG_RMW32(&pReg->BSRR.R,MASK_BITS(0x1U,pinNo),(SET)<<(pinNo+16U));
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	699a      	ldr	r2, [r3, #24]
 800034c:	7bbb      	ldrb	r3, [r7, #14]
 800034e:	2101      	movs	r1, #1
 8000350:	fa01 f303 	lsl.w	r3, r1, r3
 8000354:	43db      	mvns	r3, r3
 8000356:	401a      	ands	r2, r3
 8000358:	7bbb      	ldrb	r3, [r7, #14]
 800035a:	3310      	adds	r3, #16
 800035c:	2101      	movs	r1, #1
 800035e:	4099      	lsls	r1, r3
 8000360:	7bbb      	ldrb	r3, [r7, #14]
 8000362:	2001      	movs	r0, #1
 8000364:	fa00 f303 	lsl.w	r3, r0, r3
 8000368:	400b      	ands	r3, r1
 800036a:	431a      	orrs	r2, r3
 800036c:	693b      	ldr	r3, [r7, #16]
 800036e:	619a      	str	r2, [r3, #24]
			}

			/** Set the mode of the GPIO Pins */
			if( ((ConfigPtr[loopItr0]).PinMode)==PIN_MODE_GPIO && ((ConfigPtr[loopItr0]).PinDirection==PORT_PIN_IN) )
 8000370:	7dfb      	ldrb	r3, [r7, #23]
 8000372:	00db      	lsls	r3, r3, #3
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	4413      	add	r3, r2
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d112      	bne.n	80003a4 <Port_Init+0x1bc>
 800037e:	7dfb      	ldrb	r3, [r7, #23]
 8000380:	00db      	lsls	r3, r3, #3
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	4413      	add	r3, r2
 8000386:	785b      	ldrb	r3, [r3, #1]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d10b      	bne.n	80003a4 <Port_Init+0x1bc>
			{
				REG_RMW32(&pReg->MODER.R,MASK_BITS(0x3U,pinNo*2U),(PORT_PIN_IN)<<(pinNo*2U));
 800038c:	693b      	ldr	r3, [r7, #16]
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	7bbb      	ldrb	r3, [r7, #14]
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	2103      	movs	r1, #3
 8000396:	fa01 f303 	lsl.w	r3, r1, r3
 800039a:	43db      	mvns	r3, r3
 800039c:	401a      	ands	r2, r3
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	e078      	b.n	8000496 <Port_Init+0x2ae>
			}
			else if (((ConfigPtr[loopItr0]).PinMode)>=PIN_MODE_ALT_FUNC_0)
 80003a4:	7dfb      	ldrb	r3, [r7, #23]
 80003a6:	00db      	lsls	r3, r3, #3
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	4413      	add	r3, r2
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b03      	cmp	r3, #3
 80003b0:	d954      	bls.n	800045c <Port_Init+0x274>
			{
				/** Select the Alternate Functionality in AFRL */
				if( (((ConfigPtr[loopItr0]).PinMode)<=PIN_MODE_ALT_FUNC_7))
 80003b2:	7dfb      	ldrb	r3, [r7, #23]
 80003b4:	00db      	lsls	r3, r3, #3
 80003b6:	687a      	ldr	r2, [r7, #4]
 80003b8:	4413      	add	r3, r2
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b0b      	cmp	r3, #11
 80003be:	d81b      	bhi.n	80003f8 <Port_Init+0x210>
				{
					REG_RMW32(&pReg->AFRL.R,MASK_BITS(0xFU,pinNo*4U),(((ConfigPtr[loopItr0]).PinMode-4U))<<(pinNo*4U));
 80003c0:	693b      	ldr	r3, [r7, #16]
 80003c2:	6a1a      	ldr	r2, [r3, #32]
 80003c4:	7bbb      	ldrb	r3, [r7, #14]
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	210f      	movs	r1, #15
 80003ca:	fa01 f303 	lsl.w	r3, r1, r3
 80003ce:	43db      	mvns	r3, r3
 80003d0:	401a      	ands	r2, r3
 80003d2:	7dfb      	ldrb	r3, [r7, #23]
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	6879      	ldr	r1, [r7, #4]
 80003d8:	440b      	add	r3, r1
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	1f19      	subs	r1, r3, #4
 80003de:	7bbb      	ldrb	r3, [r7, #14]
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	4099      	lsls	r1, r3
 80003e4:	7bbb      	ldrb	r3, [r7, #14]
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	200f      	movs	r0, #15
 80003ea:	fa00 f303 	lsl.w	r3, r0, r3
 80003ee:	400b      	ands	r3, r1
 80003f0:	431a      	orrs	r2, r3
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	621a      	str	r2, [r3, #32]
 80003f6:	e01a      	b.n	800042e <Port_Init+0x246>
				}
				else /** Select the Alternate Functionality in AFRH */
				{
					REG_RMW32(&pReg->AFRH.R,MASK_BITS(0xFU,pinNo*4U),(((ConfigPtr[loopItr0]).PinMode-4U))<<(pinNo*4U));
 80003f8:	693b      	ldr	r3, [r7, #16]
 80003fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003fc:	7bbb      	ldrb	r3, [r7, #14]
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	210f      	movs	r1, #15
 8000402:	fa01 f303 	lsl.w	r3, r1, r3
 8000406:	43db      	mvns	r3, r3
 8000408:	401a      	ands	r2, r3
 800040a:	7dfb      	ldrb	r3, [r7, #23]
 800040c:	00db      	lsls	r3, r3, #3
 800040e:	6879      	ldr	r1, [r7, #4]
 8000410:	440b      	add	r3, r1
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	1f19      	subs	r1, r3, #4
 8000416:	7bbb      	ldrb	r3, [r7, #14]
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	4099      	lsls	r1, r3
 800041c:	7bbb      	ldrb	r3, [r7, #14]
 800041e:	009b      	lsls	r3, r3, #2
 8000420:	200f      	movs	r0, #15
 8000422:	fa00 f303 	lsl.w	r3, r0, r3
 8000426:	400b      	ands	r3, r1
 8000428:	431a      	orrs	r2, r3
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	625a      	str	r2, [r3, #36]	; 0x24
				}
				REG_RMW32(&pReg->MODER.R,MASK_BITS(0x3U,pinNo*2U),(0x2U)<<(pinNo*2U));
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	7bbb      	ldrb	r3, [r7, #14]
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	2103      	movs	r1, #3
 8000438:	fa01 f303 	lsl.w	r3, r1, r3
 800043c:	43db      	mvns	r3, r3
 800043e:	401a      	ands	r2, r3
 8000440:	7bbb      	ldrb	r3, [r7, #14]
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	2102      	movs	r1, #2
 8000446:	4099      	lsls	r1, r3
 8000448:	7bbb      	ldrb	r3, [r7, #14]
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	2003      	movs	r0, #3
 800044e:	fa00 f303 	lsl.w	r3, r0, r3
 8000452:	400b      	ands	r3, r1
 8000454:	431a      	orrs	r2, r3
 8000456:	693b      	ldr	r3, [r7, #16]
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	e01c      	b.n	8000496 <Port_Init+0x2ae>
			}
			else
			{
				REG_RMW32(&pReg->MODER.R,MASK_BITS(0x3U,pinNo*2U),((ConfigPtr[loopItr0]).PinMode)<<(pinNo*2U));
 800045c:	693b      	ldr	r3, [r7, #16]
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	7bbb      	ldrb	r3, [r7, #14]
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	2103      	movs	r1, #3
 8000466:	fa01 f303 	lsl.w	r3, r1, r3
 800046a:	43db      	mvns	r3, r3
 800046c:	401a      	ands	r2, r3
 800046e:	7dfb      	ldrb	r3, [r7, #23]
 8000470:	00db      	lsls	r3, r3, #3
 8000472:	6879      	ldr	r1, [r7, #4]
 8000474:	440b      	add	r3, r1
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	4619      	mov	r1, r3
 800047a:	7bbb      	ldrb	r3, [r7, #14]
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	fa01 f303 	lsl.w	r3, r1, r3
 8000482:	4618      	mov	r0, r3
 8000484:	7bbb      	ldrb	r3, [r7, #14]
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	2103      	movs	r1, #3
 800048a:	fa01 f303 	lsl.w	r3, r1, r3
 800048e:	4003      	ands	r3, r0
 8000490:	431a      	orrs	r2, r3
 8000492:	693b      	ldr	r3, [r7, #16]
 8000494:	601a      	str	r2, [r3, #0]
	for(loopItr0=0U; loopItr0<TOTAL_NO_OF_PINS; loopItr0++)
 8000496:	7dfb      	ldrb	r3, [r7, #23]
 8000498:	3301      	adds	r3, #1
 800049a:	75fb      	strb	r3, [r7, #23]
 800049c:	7dfb      	ldrb	r3, [r7, #23]
 800049e:	2b8f      	cmp	r3, #143	; 0x8f
 80004a0:	f67f aec0 	bls.w	8000224 <Port_Init+0x3c>
			}
		}
	}

#if(GPIO_PORT_LOCK == STD_ON)
	for(loopItr0 =0U; (loopItr0 < TOTAL_NO_OF_PORTS); loopItr0++)
 80004a4:	2300      	movs	r3, #0
 80004a6:	75fb      	strb	r3, [r7, #23]
 80004a8:	e017      	b.n	80004da <Port_Init+0x2f2>
 80004aa:	bf00      	nop
 80004ac:	200004c0 	.word	0x200004c0
 80004b0:	200004c4 	.word	0x200004c4
 80004b4:	20000000 	.word	0x20000000
	{
		if( ((portsConfigured>>loopItr0)&0x1U) == SET )
 80004b8:	8aba      	ldrh	r2, [r7, #20]
 80004ba:	7dfb      	ldrb	r3, [r7, #23]
 80004bc:	fa42 f303 	asr.w	r3, r2, r3
 80004c0:	f003 0301 	and.w	r3, r3, #1
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d005      	beq.n	80004d4 <Port_Init+0x2ec>
		{
			GPIO_Port_Lock(loopItr0,0xFFFF);  /** Locks all the pins of the port until next reset */
 80004c8:	7dfb      	ldrb	r3, [r7, #23]
 80004ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 f80e 	bl	80004f0 <GPIO_Port_Lock>
	for(loopItr0 =0U; (loopItr0 < TOTAL_NO_OF_PORTS); loopItr0++)
 80004d4:	7dfb      	ldrb	r3, [r7, #23]
 80004d6:	3301      	adds	r3, #1
 80004d8:	75fb      	strb	r3, [r7, #23]
 80004da:	7dfb      	ldrb	r3, [r7, #23]
 80004dc:	2b08      	cmp	r3, #8
 80004de:	d9eb      	bls.n	80004b8 <Port_Init+0x2d0>
		}
	}
#endif

	gu8_PortInitStatus = MODULE_INITIALIZED;
 80004e0:	4b02      	ldr	r3, [pc, #8]	; (80004ec <Port_Init+0x304>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]

}
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200004c0 	.word	0x200004c0

080004f0 <GPIO_Port_Lock>:
}
#endif

#if(GPIO_PORT_LOCK == STD_ON)
void GPIO_Port_Lock(uint8_t moduleNo, uint16_t lockMask)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	460a      	mov	r2, r1
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	4613      	mov	r3, r2
 80004fe:	80bb      	strh	r3, [r7, #4]
	const uint32_t lockBit = 0x00010000;
 8000500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000504:	60fb      	str	r3, [r7, #12]
	volatile  GPIO_RegTypes * pReg = 0U;
 8000506:	2300      	movs	r3, #0
 8000508:	60bb      	str	r3, [r7, #8]
	pReg = (GPIO_RegTypes *)Gpio_BaseAddress[moduleNo];
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <GPIO_Port_Lock+0x58>)
 800050e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000512:	60bb      	str	r3, [r7, #8]
	lockMask = lockMask&0x0000FFFF;
	REG_WRITE32(&pReg->LCKR.R,(uint32_t)(lockBit|lockMask));
 8000514:	88ba      	ldrh	r2, [r7, #4]
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	431a      	orrs	r2, r3
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	61da      	str	r2, [r3, #28]
	REG_WRITE32(&pReg->LCKR.R,(uint32_t)(0x00000000U|lockMask));
 800051e:	88ba      	ldrh	r2, [r7, #4]
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	61da      	str	r2, [r3, #28]
	REG_WRITE32(&pReg->LCKR.R,(uint32_t)(lockBit|lockMask));
 8000524:	88ba      	ldrh	r2, [r7, #4]
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	431a      	orrs	r2, r3
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	61da      	str	r2, [r3, #28]
	REG_READ32(&pReg->LCKR.R);
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	69db      	ldr	r3, [r3, #28]
	while(REG_READ32((&pReg->LCKR.R)>>16U)!=SET);
 8000532:	bf00      	nop
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	69db      	ldr	r3, [r3, #28]
 8000538:	0c1b      	lsrs	r3, r3, #16
 800053a:	2b01      	cmp	r3, #1
 800053c:	d1fa      	bne.n	8000534 <GPIO_Port_Lock+0x44>
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	20000000 	.word	0x20000000

0800054c <GPIO_Port_Enable>:
	GPIO_Reset_Port(moduleNo);
}
#endif

void GPIO_Port_Enable(uint8_t portNo)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
	RCC_AHB1PeripheralClkEnable(portNo);	/** Turns on the Clock for the configured Port */
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4618      	mov	r0, r3
 800055a:	f000 f805 	bl	8000568 <RCC_AHB1PeripheralClkEnable>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <RCC_AHB1PeripheralClkEnable>:

	}
}

void RCC_AHB1PeripheralClkEnable(Rcc_AHB1_Peripherals peripheral)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	REG_RMW32(RCC_AHB1ENR,SET_BIT(peripheral) ,SET_BIT(peripheral) );
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <RCC_AHB1PeripheralClkEnable+0x34>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2101      	movs	r1, #1
 800057a:	fa01 f303 	lsl.w	r3, r1, r3
 800057e:	43db      	mvns	r3, r3
 8000580:	401a      	ands	r2, r3
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	2101      	movs	r1, #1
 8000586:	fa01 f303 	lsl.w	r3, r1, r3
 800058a:	4904      	ldr	r1, [pc, #16]	; (800059c <RCC_AHB1PeripheralClkEnable+0x34>)
 800058c:	4313      	orrs	r3, r2
 800058e:	600b      	str	r3, [r1, #0]
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40023830 	.word	0x40023830

080005a0 <main>:
#include "Reg_Macros.h"
#include "RCC.h"
#include "Gpio.h"

int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	//RCC_AHB1PeripheralClkEnable(EN_GPIOA);
	Port_Init (&Port_Config0);
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <main+0x18>)
 80005a6:	f7ff fe1f 	bl	80001e8 <Port_Init>
	GPIO_A.MODER.B.ModeR12 = 0x1U;
 80005aa:	4a04      	ldr	r2, [pc, #16]	; (80005bc <main+0x1c>)
 80005ac:	6813      	ldr	r3, [r2, #0]
 80005ae:	2101      	movs	r1, #1
 80005b0:	f361 6319 	bfi	r3, r1, #24, #2
 80005b4:	6013      	str	r3, [r2, #0]
	if((GPIO_B.MODER.B.ModeR1)==0x1U)
	{
		RCC_AHB1PeripheralClkEnable(EN_GPIOC);
	}
#endif
	for(;;);
 80005b6:	e7fe      	b.n	80005b6 <main+0x16>
 80005b8:	20000024 	.word	0x20000024
 80005bc:	40020000 	.word	0x40020000

080005c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005c0:	480d      	ldr	r0, [pc, #52]	; (80005f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <LoopForever+0x6>)
  ldr r1, =_edata
 80005c6:	490e      	ldr	r1, [pc, #56]	; (8000600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c8:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <LoopForever+0xe>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005dc:	4c0b      	ldr	r4, [pc, #44]	; (800060c <LoopForever+0x16>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005ea:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80005ee:	f000 f811 	bl	8000614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f2:	f7ff ffd5 	bl	80005a0 <main>

080005f6 <LoopForever>:

LoopForever:
    b LoopForever
 80005f6:	e7fe      	b.n	80005f6 <LoopForever>
  ldr   r0, =_estack
 80005f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000600:	200004a4 	.word	0x200004a4
  ldr r2, =_sidata
 8000604:	0800067c 	.word	0x0800067c
  ldr r2, =_sbss
 8000608:	200004a4 	.word	0x200004a4
  ldr r4, =_ebss
 800060c:	200004c8 	.word	0x200004c8

08000610 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC_IRQHandler>
	...

08000614 <__libc_init_array>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	4e0d      	ldr	r6, [pc, #52]	; (800064c <__libc_init_array+0x38>)
 8000618:	4c0d      	ldr	r4, [pc, #52]	; (8000650 <__libc_init_array+0x3c>)
 800061a:	1ba4      	subs	r4, r4, r6
 800061c:	10a4      	asrs	r4, r4, #2
 800061e:	2500      	movs	r5, #0
 8000620:	42a5      	cmp	r5, r4
 8000622:	d109      	bne.n	8000638 <__libc_init_array+0x24>
 8000624:	4e0b      	ldr	r6, [pc, #44]	; (8000654 <__libc_init_array+0x40>)
 8000626:	4c0c      	ldr	r4, [pc, #48]	; (8000658 <__libc_init_array+0x44>)
 8000628:	f000 f818 	bl	800065c <_init>
 800062c:	1ba4      	subs	r4, r4, r6
 800062e:	10a4      	asrs	r4, r4, #2
 8000630:	2500      	movs	r5, #0
 8000632:	42a5      	cmp	r5, r4
 8000634:	d105      	bne.n	8000642 <__libc_init_array+0x2e>
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800063c:	4798      	blx	r3
 800063e:	3501      	adds	r5, #1
 8000640:	e7ee      	b.n	8000620 <__libc_init_array+0xc>
 8000642:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000646:	4798      	blx	r3
 8000648:	3501      	adds	r5, #1
 800064a:	e7f2      	b.n	8000632 <__libc_init_array+0x1e>
 800064c:	08000674 	.word	0x08000674
 8000650:	08000674 	.word	0x08000674
 8000654:	08000674 	.word	0x08000674
 8000658:	08000678 	.word	0x08000678

0800065c <_init>:
 800065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065e:	bf00      	nop
 8000660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000662:	bc08      	pop	{r3}
 8000664:	469e      	mov	lr, r3
 8000666:	4770      	bx	lr

08000668 <_fini>:
 8000668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066a:	bf00      	nop
 800066c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800066e:	bc08      	pop	{r3}
 8000670:	469e      	mov	lr, r3
 8000672:	4770      	bx	lr
